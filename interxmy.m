%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%{
Function information
Function to calculate intersection of three spheres
Returns NAN if no intersection or some bad condition encountered
X1, X2, X3 are vectors of centers of three spheres
r, r, r are radii of the three spheres
pos =0 for lower point and 1 for higher point
Computation Code calculated in (and copied from) Maple
For questions/suggestions, contact hrishi.shah2002@gmail.com
%}
%{
More information on Maple and the method for computing this file
Maple is a symbolic computation tool that I used for solving symbolic equations.
More information on Maple is available at https://www.maplesoft.com/products/Maple/.
An example of the solve method I used to solve my equations is at https://www.youtube.com/watch?reload=9&v=W0cUe56dA_g.
A more comprehensive video around equation solving with Maple is available at https://www.youtube.com/watch?v=3g9ytEvBpWs.
Here are the steps in a more formal manner:
1) I input the original equations for three spheres into Maple e.g. [(x-x1)^2+(y-y1)^2+(z-z1)^2=r^2]
2) I passed those three equations as arguments to the "solve" method in Maple.
3) Maple gave me three solutions for the coordinates in three directions: x, y and z.
4) For each of these three axes:
	a) I copied the original solution from Maple to Matlab in text form.
	b) Knowing that there could be two solutions to the problem, separated the solution into three terms a,b and c and then created the two solutions. These are broken up either between numerator/denominator or if the term in inside a square root.
	c) I built in switch cases for special cases where there were issues with computation, e.g. zero denominator or negative values in the square root terms. These cases generally correspond to no-solution inputs.
%}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function result=interxmy(X1,X2,X3,r)
    x1=X1(1); y1=X1(2); z1=X1(3);
    x2=X2(1); y2=X2(2); z2=X2(3);
    x3=X3(1); y3=X3(2); z3=X3(3);
    x2=x2-x1; y2=y2-y1; z2=z2-z1;
    x3=x3-x1; y3=y3-y1; z3=z3-z1;
    a=(16*y2^2*z3*y3^2*z2*x3*r^2*x2-4*y2^3*z3*y3*z2*x3*r^2*x2+4*y2^3*z3*y3*z2*x3*x2*r^2-4*y2*y3^3*z2*x2*z3*r^2*x3+4*y2*y3^3*z2*x2*z3*r^2*x3+16*z2*x3^2*x2^2*r^2*y3*y2*z3-4*z2*x3^3*x2*r^2*y3*y2*z3+4*z2*x3^3*x2*y2*z3*r^2*y3-4*x2^3*z3*x3*y2*r^2*z2*y3+4*x2^3*z3*x3*y2*r^2*z2*y3-4*y2*z3*z2^3*y3*x3*r^2*x2+4*y2*z3*z2^3*y3*x3*x2*r^2+8*y2*z3^2*z2^2*y3*x2*r^2*x3-4*y2*z3^2*z2^2*y3*x2*r^2*x3+4*x2^2*y3^2*z2*y2^2*z3*x3^2-4*x2^4*z3^2*x3^2*y3*y2-2*z2^2*x3^4*x2^2*y2^2+2*z2^2*x3^3*y2^2*r^2*x2-2*z2^2*x3^3*y2^2*x2*r^2+2*z2^2*x3^5*x2*y2*y3+2*x2^5*z3^2*x3*y3*y2+2*z2^3*y3^2*y2^2*z3*x3^2+2*z2^3*y3^2*x2^2*z3*x3^2+2*z2^3*y3^2*x2^2*z3*r^2-2*z2^3*y3^2*x2^2*z3*r^2+2*x2^2*y3^4*z2*y2^2*z3-4*x2^2*y3^2*z2^2*x3^2*y2^2+2*x2^4*y3^2*z2*z3*x3^2-2*x2^2*y3^3*z2^2*y2*x3^2+2*x2^2*y3^3*z2^2*y2*z3^2+2*x2^3*y3^2*z2^2*x3*z3^2+2*x2^2*y3^2*z2*y2^2*z3^3+2*x2^2*y3^3*z2^2*y2*r^2+2*x2^2*y3^2*z2^2*x3^2*r^2+2*x2^4*y3^2*z2*z3*r^2-2*x2^4*y3^2*z2*z3*r^2-2*x2^2*y3^3*z2^2*y2*r^2+2*x2^3*y3^2*z2^2*x3*r^2-2*x2^3*y3^2*z2^2*x3*r^2+2*y2^4*z3*x3^2*y3^2*z2+2*y2^2*z3*x3^4*z2*x2^2-4*y2^2*z3^2*x3^2*x2^2*y3^2+2*y2^3*z3^2*x3^2*z2^2*y3+2*y2^2*z3^2*x3^3*x2*z2^2-2*y2^3*z3^2*x3^2*x2^2*y3+2*y2^3*z3^2*x3^2*r^2*y3+2*y2^2*z3*x3^4*z2*r^2-2*y2^2*z3*x3^4*z2*r^2+2*y2^2*z3^2*x3^2*x2^2*r^2-2*y2^3*z3^2*x3^2*r^2*y3+2*y2^2*z3^2*x3^3*x2*r^2-2*y2^2*z3^2*x3^3*x2*r^2-2*y2^2*z3^2*y3^2*x2^3*x3-4*y2^4*z3^2*y3^2*x2*x3+2*y2^2*z3^2*y3^2*x2^2*r^2+4*y2^3*z3^2*y3*x2^3*x3+2*y2^5*z3^2*y3*x2*x3+4*y2*y3^3*z2^2*x3^3*x2+2*y2*y3^5*z2^2*x3*x2-2*y2^2*y3^2*z2^2*x3^3*x2-4*y2^2*y3^4*z2^2*x3*x2+2*y2^2*y3^2*z2^2*x3^2*r^2-4*z2^2*x3^4*x2^2*y2*y3+2*z2*x3^2*x2^2*y2^2*z3^3+2*z2*x3^2*y2^4*z3*r^2+2*z2^2*x3^2*y2^3*r^2*y3-2*z2*x3^2*y2^4*z3*r^2-2*z2^2*x3^2*y2^3*r^2*y3-z2^4*y3^2*x3^2*x2^2-z2^4*y3^2*x3^2*y2^2+2*z2^3*y3^4*x2^2*z3+2*z2^3*y3^2*x2^2*z3^3+2*x2^2*y3^5*z2^2*y2-2*x2^2*y3^4*z2^2*y2^2-2*x2^4*y3^2*z2^2*x3^2+2*x2^3*y3^2*z2^2*x3^3+2*x2^4*y3^4*z2*z3+2*x2^3*y3^4*z2^2*x3+2*x2^2*y3^4*z2^2*r^2-2*y2^4*z3^2*x3^2*y3^2+2*y2^5*z3^2*x3^2*y3+2*y2^4*z3*x3^4*z2+2*y2^2*z3^2*x3^3*x2^3-2*y2^2*z3^2*x3^4*x2^2+2*y2^4*z3^2*x3^3*x2+2*y2^2*z3*x3^4*z2^3-y2^2*z3^4*x3^2*x2^2+2*y2^4*z3^2*x3^2*r^2-2*y2^2*z3^2*y3^4*x2^2+2*y2^3*z3^2*y3^3*x2^2-y2^2*z3^4*y3^2*x2^2-y2^4*z3^2*y3^2*x2^2+2*y2^3*y3^3*z2^2*x3^2-y2^2*y3^4*z2^2*x3^2-2*y2^4*y3^2*z2^2*x3^2-z2^4*y3^4*x2^2-2*x2^4*y3^4*z2^2-2*y2^4*z3^2*x3^4-y2^4*z3^4*x3^2-2*z2^2*x3^4*y2^4-z2^4*x3^4*y2^2-2*x2^4*z3^2*y3^4-x2^4*z3^4*y3^2-z3^2*y2^6*x3^2-x3^6*z2^2*y2^2-z3^2*x2^6*y3^2-2*y2^4*x3^4*y3^2+2*y2^4*x3^4*r^2+2*y2^5*x3^4*y3-y2^4*x3^2*r^4-y2^4*x3^2*y3^4+2*y2^5*x3^2*y3^3-y2^4*x3^2*r^4-y2^6*x3^2*y3^2-y2^2*x3^4*r^4-y2^2*x3^4*x2^4+2*y2^2*x3^5*x2^3-y2^2*x3^4*r^4-y2^2*x3^6*x2^2-2*y2^4*x3^4*x2^2+2*y2^4*x3^4*r^2+2*y2^4*x3^5*x2+2*x2^4*y3^5*y2-2*x2^4*y3^4*y2^2+2*x2^4*y3^4*r^2-x2^2*y3^4*r^4-x2^2*y3^6*y2^2+2*x2^2*y3^5*y2^3-x2^2*y3^4*y2^4-x2^2*y3^4*r^4-x2^4*y3^2*r^4-x2^6*y3^2*x3^2+2*x2^5*y3^2*x3^3-x2^4*y3^2*x3^4-x2^4*y3^2*r^4+2*x2^5*y3^4*x3-2*x2^4*y3^4*x3^2+2*x2^4*y3^4*r^2-y3^6*z2^2*x2^2-y2^4*x3^6-y2^6*x3^4-x2^6*y3^4-x2^4*y3^6-2*z2*x3^2*r^2*y2^2*z3*r^2-2*z2*y3^2*r^2*x2^2*z3*r^2+2*z2*y3^2*r^2*x2^2*z3*r^2+2*x2^4*y3^2*z2*z3^3+2*y2*r^4*z2^2*y3*x3*x2+2*x2^2*y3^2*z2*y2^2*z3*r^2-8*x2^2*y3^3*z2*r^2*y2*z3-2*x2^2*y3^2*z2*y2^2*z3*r^2-8*x2^3*y3^2*z2*z3*r^2*x3+2*y2^2*z3*x3^2*r^2*y3^2*z2-8*y2^3*z3*x3^2*r^2*z2*y3-2*y2^2*z3*x3^2*z2*y3^2*r^2-8*y2^2*z3*x3^3*z2*r^2*x2-4*y2^2*z3^2*y3^2*x2*z2^2*x3-4*y2^2*z3^2*y3^2*x2*r^2*x3+4*y2^2*z3^2*y3^2*x2*r^2*x3-4*y2^3*z3*y3*z2*x3^3*x2-4*y2^3*z3*y3^3*z2*x3*x2-4*y2^3*z3^3*y3*z2*x3*x2+4*y2^3*z3^2*y3*x2*z2^2*x3-4*y2^3*z3^2*y3*x2*r^2*x3-4*y2*y3^3*z2*x2^3*z3*x3+4*y2*y3^3*z2^2*x3*x2*z3^2-4*y2*y3^3*z2^3*x2*z3*x3-4*y2*y3^3*z2^2*x3*x2*r^2-4*y2^2*y3^2*z2^2*x3*r^2*x2+4*y2^2*y3^2*z2^2*x3*x2*r^2-4*z2^2*x3^2*x2^2*y2*z3^2*y3+2*z2*x3^2*x2^2*y2^2*z3*r^2-4*z2^2*x3^2*x2^2*y2*r^2*y3-2*z2*x3^2*x2^2*y2^2*z3*r^2+4*z2^2*x3^2*x2^2*y2*r^2*y3-4*z2^3*x3^3*x2*y2*z3*y3+4*z2^2*x3^3*x2*y2*z3^2*y3-4*z2*x3^3*x2^3*y3*y2*z3-4*z2^2*x3^3*x2*y2*r^2*y3+4*x2^3*z3^2*x3*y2*z2^2*y3-4*x2^3*z3^3*x3*y2*z2*y3-4*x2^3*z3^2*x3*y2*r^2*y3+2*x2^2*z3*x3^2*r^2*y3^2*z2-4*x2^2*z3^2*x3^2*r^2*y3*y2-2*x2^2*z3*x3^2*z2*y3^2*r^2+4*x2^2*z3^2*x3^2*y2*r^2*y3-4*y2*z3^3*z2^3*y3*x3*x2+2*y2*z3^2*z2^4*y3*x2*x3+2*y2*z3^4*z2^2*y3*x3*x2-2*r^2*y3^2*z2*x2^2*z3*r^2-2*y2^2*z3*r^2*z2*x3^2*r^2+2*r^4*y3*y2*z3^2*x2*x3+2*z2^2*x3^5*y2^2*x2+2*z2^2*x3^4*y2^3*y3+2*z2*x3^2*y2^4*z3^3+2*z2^2*x3^4*y2^2*r^2-z2^2*x3^4*x2^2*y3^2+2*x2^5*z3^2*x3*y3^2-x2^4*z3^2*x3^2*y2^2-2*x2^4*z3^2*x3^2*y3^2+2*x2^4*z3^2*y3^3*y2+2*x2^4*z3^2*y3^2*r^2-2*y2^2*x3^4*z2^2*y3^2-2*z2^2*x3^2*x2^2*y3^4-2*x2^2*z3^2*y2^4*x3^2-2*x2^4*y3^2*y2^2*z3^2+2*y2^2*z3^3*z2^3*x3^2-z3^2*y2^2*r^4*x3^2-z3^2*y2^2*z2^4*x3^2-z3^2*y2^2*r^4*x3^2-2*z3^2*y2^4*x3^2*z2^2+2*z3^2*y2^4*x3^2*r^2-2*x3^4*z2^2*y2^2*z3^2+2*x3^4*z2^2*y2^2*r^2-x3^2*z2^2*y2^2*r^4-x3^2*z2^2*y2^2*z3^4-x3^2*z2^2*y2^2*r^4-2*z3^2*x2^4*y3^2*z2^2+2*z3^2*x2^4*y3^2*r^2-z3^2*x2^2*r^4*y3^2-z3^2*x2^2*z2^4*y3^2-z3^2*x2^2*r^4*y3^2+2*y2^3*x3^4*r^2*y3-2*y2^3*x3^4*x2^2*y3-2*y2^3*x3^4*r^2*y3+2*y2^4*x3^3*r^2*x2-2*y2^4*x3^3*x2*y3^2-2*z2^2*x3^2*x2^2*y3^2*z3^2+2*z2^2*x3^2*x2^2*y3^2*r^2-2*x2^2*z3^2*y2^2*x3^2*z2^2+2*x2^2*z3^2*y2^2*x3^2*r^2+2*x2^2*y3^2*y2^2*z3^2*r^2+2*y2^2*z3^3*z2*x3^2*r^2-2*y2^2*z3^3*z2*x3^2*r^2+2*z2^3*x3^2*y2^2*z3*r^2-2*z2^3*x3^2*y2^2*z3*r^2+2*x2^2*z3^3*r^2*y3^2*z2-2*x2^2*z3^3*z2*y3^2*r^2+2*r^4*y3^2*z2*x2^2*z3+2*y2^2*z3*r^4*z2*x3^2+2*x2^2*z3*y3^4*r^2*z2+2*x2^2*z3^2*y3^3*r^2*y2-2*x2^2*z3*y3^4*z2*r^2-2*x2^2*z3^2*y3^3*y2*r^2+2*x2^3*z3^2*y3^2*r^2*x3-2*x2^3*z3^2*y3^2*r^2*x3-2*y2^2*z3^2*z2^2*y3^2*x2^2-2*y2^2*x3^2*z2^2*y3^2*z3^2+2*y2^2*x3^2*z2^2*y3^2*r^2-4*y2*z3^2*z2^2*y3*x3*x2*r^2-4*y2*z3^3*z2*y3*x2*r^2*x3+4*y2*z3^3*z2*y3*x2*r^2*x3-4*r^4*y3*y2*z3*z2*x3*x2-4*r^2*y3*y2*z3^2*x2*r^2*x3-4*y2*r^2*z2^2*y3*x3*x2*r^2+4*r^2*y3*y2*z3*z2*x3*x2*r^2+4*y2*r^2*z2*y3*x2*z3*r^2*x3+2*z2*x3^2*r^2*y2^2*z3*r^2+2*y2*z3^2*r^4*y3*x2*x3+2*y2*r^4*z2^2*y3*x3*x2+4*y2^2*x3*x2*y3^2*r^2*r^2+4*y2^2*x3*x2*y3^2*r^2*r^2-4*y2^2*x3*x2*y3^2*r^2*r^2+4*y2*x3^2*x2^2*y3*r^2*r^2+4*y2*x3^2*x2^2*y3*r^2*r^2-4*y2*x3^2*x2^2*y3*r^2*r^2-4*y2^3*x3*x2*y3*z3^2*r^2-4*y2*x3*x2*y3^3*r^2*r^2-4*y2^3*x3*x2*y3*r^2*r^2-4*y2*x3*x2*y3^3*z2^2*r^2-4*y2*x3*x2^3*y3*r^2*r^2-4*y2*x3^3*x2*y3*r^2*r^2-4*y2*x3^3*x2*y3*z2^2*r^2-4*y2*x3*x2^3*y3*z3^2*r^2-4*z3^2*y2^2*r^2*x3^2*z2^2+2*z3^2*y2^2*r^2*x3^2*r^2+2*z3^2*y2^2*z2^2*x3^2*r^2+2*x3^2*z2^2*y2^2*z3^2*r^2+2*x3^2*z2^2*y2^2*r^2*r^2-4*z3^2*x2^2*r^2*y3^2*z2^2+2*z3^2*x2^2*r^2*y3^2*r^2+2*z3^2*x2^2*z2^2*y3^2*r^2-2*y2^3*x3^2*r^2*y3*r^2-2*y2^3*x3^2*x2^2*y3*r^2+2*y2^3*x3^2*x2^2*y3*r^2-2*y2^3*x3^2*r^2*r^2*y3+2*y2^3*x3^2*r^2*r^2*y3-2*y2^2*x3^3*r^2*x2*r^2-2*y2^2*x3^3*r^2*x2*y3^2-2*y2^2*x3^3*r^2*x2*r^2+2*y2^2*x3^3*r^2*x2*y3^2+2*y2^2*x3^3*r^2*x2*r^2+2*y2^2*x3^2*r^2*y3^2*r^2+4*y2^2*x3^2*x2^2*y3^2*r^2+2*y2^2*x3^2*r^2*x2^2*r^2+4*y2^2*x3^2*x2^2*y3^2*r^2-8*y2^3*x3^3*r^2*x2*y3-2*x2^2*y3^3*r^2*y2*x3^2-2*x2^2*y3^3*r^2*y2*r^2-2*x2^2*y3^3*y2*r^2*r^2+2*x2^2*y3^3*y2*x3^2*r^2+2*x2^2*y3^3*y2*r^2*r^2-2*x2^3*y3^2*r^2*y2^2*x3-2*x2^3*y3^2*r^2*r^2*x3-2*x2^3*y3^2*r^2*x3*r^2+2*x2^3*y3^2*y2^2*x3*r^2+2*x2^3*y3^2*r^2*x3*r^2+2*x2^2*y3^2*y2^2*r^2*r^2-4*y2*z3*r^2*y3*z2*x3*x2*r^2-4*x2^4*y3^2*r^2*x3^2+2*x2^4*y3^2*r^2*r^2+2*x2^3*y3^2*r^2*x3^3+2*x2^4*y3^2*x3^2*r^2-2*x2^5*y3^2*x3*r^2-2*x2^3*y3^2*r^2*x3^3+2*x2^4*y3^2*x3^2*r^2-y3^2*z2^2*r^4*x2^2-y3^2*z2^2*x2^2*z3^4-y3^2*z2^2*x2^2*r^4-2*y3^4*z2^2*x2^2*z3^2+2*y3^4*z2^2*x2^2*r^2+4*y2^3*x3*x2^3*y3^3+4*y2^3*x3^3*x2*y3^3+2*y2*x3*x2^5*y3^3+2*y2^3*x3^5*x2*y3+2*y2^3*x3*x2*y3^5-4*y2^4*x3*x2*y3^4+2*y2^5*x3*x2*y3^3+2*y2*x3^3*x2^5*y3-4*y2*x3^4*x2^4*y3+2*y2^5*x3^3*x2*y3+2*y2*x3^5*x2^3*y3+2*y2*x3*x2^3*y3^5+4*y2^3*x3^3*x2^3*y3+4*y2*x3^3*x2^3*y3^3-2*y2^4*x3^3*x2*r^2-2*y2^5*x3^2*r^2*y3+2*y2^4*x3^2*y3^2*r^2+2*y2^3*x3^2*r^2*y3^3+2*y2^3*x3^2*r^4*y3-4*y2^4*x3^2*r^2*y3^2-3*y2^4*x3^2*x2^2*y3^2+2*y2^4*x3^2*r^2*r^2+2*y2^5*x3^2*r^2*y3+2*y2^4*x3^2*y3^2*r^2-2*y2^3*x3^2*y3^3*r^2-y2^2*x3^2*r^4*y3^2-3*y2^2*x3^2*x2^4*y3^2-y2^2*x3^2*r^4*y3^2-y2^2*x3^2*r^4*x2^2-3*y2^2*x3^2*x2^2*y3^4-y2^2*x3^2*x2^2*r^4+2*y2^2*x3^3*r^4*x2+2*y2^2*x3^3*r^2*x2^3-4*y2^2*x3^4*r^2*x2^2+2*y2^2*x3^4*r^2*r^2+2*y2^2*x3^5*r^2*x2+2*y2^2*x3^4*x2^2*r^2-2*y2^2*x3^3*x2^3*r^2-2*y2^2*x3^5*r^2*x2-3*y2^2*x3^4*x2^2*y3^2+2*y2^2*x3^4*x2^2*r^2+2*x2^4*y3^3*y2*r^2-2*x2^4*y3^3*y2*x3^2-2*x2^4*y3^3*y2*r^2+2*x2^3*y3^4*r^2*x3-2*x2^3*y3^4*y2^2*x3-2*x2^3*y3^4*r^2*x3-2*x2^2*y3^3*y2^3*r^2+2*x2^2*y3^4*y2^2*r^2+2*x2^2*y3^5*r^2*y2+2*x2^2*y3^3*r^4*y2-4*x2^2*y3^4*r^2*y2^2+2*x2^2*y3^4*r^2*r^2+2*x2^2*y3^3*y2^3*r^2+2*x2^2*y3^4*y2^2*r^2-2*x2^2*y3^5*y2*r^2-x2^2*y3^2*y2^2*r^4-x2^2*y3^2*y2^2*r^4-x2^2*y3^2*r^4*x3^2-x2^2*y3^2*r^4*x3^2+2*x2^3*y3^2*r^4*x3+2*x2^5*y3^2*r^2*x3+2*x2^2*y3^2*r^2*x3^2*r^2-8*x2^3*y3^3*r^2*y2*x3+2*y3^2*z2^2*r^2*x2^2*r^2+2*y3^2*z2^2*x2^2*z3^2*r^2+4*y2^4*x3*x2*y3^2*r^2+4*y2^3*x3*x2*y3^3*z2^2-4*y2^3*x3*x2*y3^3*r^2-4*y2^2*x3*x2*y3^4*r^2-4*y2^2*x3*x2*y3^2*r^4+8*y2^3*x3*x2*y3^3*r^2+4*y2*x3*x2^3*y3^3*z2^2-4*y2*x3*x2^3*y3^3*r^2-4*y2^4*x3*x2*y3^2*r^2+4*y2^3*x3^3*x2*y3*z3^2-4*y2^3*x3^3*x2*y3*r^2+4*y2^3*x3*x2*y3^3*z3^2-4*y2^3*x3*x2*y3^3*r^2+4*y2^2*x3*x2*y3^4*r^2+2*y2*x3*x2*y3^3*r^4+2*y2^3*x3*x2*y3*r^4+2*y2^3*x3*x2*y3*z3^4+2*y2^3*x3*x2*y3*r^4+2*y2*x3*x2*y3^3*z2^4+2*y2*x3*x2*y3^3*r^4+2*y2*x3*x2^3*y3*r^4+2*y2*x3^3*x2*y3*r^4+2*y2*x3^3*x2*y3*z2^4+2*y2*x3^3*x2*y3*r^4+2*y2*x3*x2^3*y3*z3^4+2*y2*x3*x2^3*y3*r^4-4*y2*x3^2*x2^2*y3*r^4-4*y2*x3^2*x2^4*y3*r^2+8*y2*x3^3*x2^3*y3*r^2-4*y2*x3^4*x2^2*y3*r^2+4*y2*x3^3*x2^3*y3*z2^2-4*y2*x3^3*x2^3*y3*r^2+4*y2*x3^2*x2^4*y3*r^2+4*y2^3*x3^3*x2*y3*z2^2-4*y2^3*x3^3*x2*y3*r^2+4*y2*x3^4*x2^2*y3*r^2+4*y2*x3^3*x2^3*y3*z3^2-4*y2*x3^3*x2^3*y3*r^2+4*y2*x3*x2^3*y3^3*z3^2-4*y2*x3*x2^3*y3^3*r^2+16*y2^2*x3^2*x2^2*y3^2*r^2);
    b=(-z2^3*y3^2-x2^2*y3^2*z2-y2^2*z3*x3^2-y2^2*z3*y3^2+y2^3*z3*y3+y2*y3^3*z2-y2^2*y3^2*z2-z2*x3^2*x2^2-z2*x3^2*y2^2+z2*x3^3*x2+x2^3*z3*x3-x2^2*z3*x3^2-x2^2*z3*y3^2+y2*z3*z2^2*y3+y2*x3^2*z2*y3+y2*z3^2*z2*y3+z2*x3*x2*y3^2+z2*x3*x2*z3^2+x2*z3*y2^2*x3+x2*z3*z2^2*x3+x2^2*y3*y2*z3-y2^2*z3^3-z2^3*x3^2-x2^2*z3^3-r^2*y3^2*z2-y2^2*z3*r^2+r^2*y3*y2*z3+y2*r^2*z2*y3+z2*y3^2*r^2-z2*x3^2*r^2+z2*x3^2*r^2-x2^2*z3*r^2+x2^2*z3*r^2+y2^2*z3*r^2-y2*z3*r^2*y3-y2*r^2*z2*y3+z2*x3*r^2*x2-z2*x3*x2*r^2+x2*z3*r^2*x3-x2*z3*r^2*x3);
    c=(-2*y2*z3*z2*y3-2*z2*x3*x2*z3+z3^2*y2^2+x3^2*z2^2+z3^2*x2^2+y2^2*x3^2+x2^2*y3^2+y3^2*z2^2-2*y2*x3*x2*y3);

    z=-1/2*(b+a^(1/2))/c;

    a=(2*z*z2*x3-2*x2*z*z3+r^2*x2-r^2*x3-x2^2*x3-y2^2*x3-z2^2*x3+r^2*x3+x2*x3^2+x2*y3^2+x2*z3^2-x2*r^2);
    b=(-2*y2*x3+2*x2*y3);
    y=a/b;
    x = 1/2*(r^2+x2^2-2*y*y2+y2^2-2*z*z2+z2^2-r^2)/x2;
    %% convert result back to global
    result=[x1;y1;z1;1]+[x;y;z;0];
end